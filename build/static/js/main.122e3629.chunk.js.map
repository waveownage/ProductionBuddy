{"version":3,"sources":["components/Home.js","components/Timer.js","components/Filling1050.js","App.js","reportWebVitals.js","index.js"],"names":["Home","class","Button","href","role","walkingGif","setUpGif","image","Timer","useState","Date","fakeCurrentDate","setFakeCurrentDate","useEffect","setTimeout","currentTimeDate","timer","getHours","getMinutes","getSeconds","message","count","cage","fill","Math","round","src","alt","filling1050","format","ticking","timezone","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAeeA,MAXf,WACI,OACI,qBAAKC,MAAM,iBAAX,SACI,gCACI,kDACA,cAACC,EAAA,EAAD,CAAQD,MAAM,kBAAkBE,KAAK,eAAeC,KAAK,SAAzD,yB,QCPVC,EAAa,yDACbC,EAAW,6DAIbC,EAAQ,GA+EGC,MA5Ef,WAAkB,IAAD,EAC+BC,mBAAS,IAAIC,MAD5C,mBACRC,EADQ,KACSC,EADT,KAGfC,qBAAU,WACNC,YAAW,kBAAMF,EAAmB,IAAIF,QAAS,OAClD,CAACC,IACJ,IAAII,EAAkB,IAAIL,KAItBM,EAAa,GAHND,EAAgBE,WAGP,GAAY,GAFnBF,EAAgBG,aACfH,EAAgBI,aAE1BC,EAAU,GACVC,EAAQ,EACRC,EAAO,EACPC,EAAO,EAqDX,OAnDIP,EAAQ,QACVI,EAAU,QACVC,EAAQ,GACRd,EAAQD,GAENU,EAAQ,MAAQA,GAAS,QAC3BI,EAAU,SACVE,EAAON,EAAQ,MACfK,EAAQG,KAAKC,MAAMH,EAAO,GAC1Bf,EAAQF,GAENW,EAAQ,MAAQA,GAAS,OAC3BI,EAAU,SACVC,EAAQ,GACRd,EAAQD,GAENU,EAAQ,KAAQA,GAAS,QAC3BI,EAAU,UACVG,EAAOP,EAAQ,KACfK,EAAQG,KAAKC,MAAMF,EAAO,MAC1BhB,EAAQF,GAENW,EAAQ,MAAQA,GAAS,QAC3BI,EAAU,kBACVC,EAAQ,GACRd,EA/Ca,8DAiDXS,EAAQ,MAAQA,GAAS,QAC3BI,EAAU,UACVG,EAAOP,EAAQ,MACfK,EAAQ,IAAMG,KAAKC,MAAMF,EAAO,MAChChB,EAAQF,GAENW,EAAQ,MAAQA,GAAS,QAC3BI,EAAU,kBACVC,EAAQ,GACRd,EAzDa,8DA2DXS,EAAQ,MAAQA,GAAS,QAC3BI,EAAU,UACVG,EAAOP,EAAQ,MACfK,EAAQ,IAAMG,KAAKC,MAAMF,EAAO,MAChChB,EAAQF,GAENW,EAAQ,QACVI,EAAU,cACVC,EAAQ,GACRd,EAnEiB,6DAwEjB,gCACE,qBAAKmB,IAAKnB,EAAOoB,IAAI,eACrB,6BAAKP,IACL,6BAAKC,Q,iBClEIO,MAZf,WAEI,OACI,sBAAK3B,MAAM,iBAAX,UACI,cAAC,EAAD,IACA,8BACA,cAAC,IAAD,CAAO4B,OAAQ,WAAYC,SAAS,EAAMC,SAAU,qB,OCQjDC,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,cAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,eAAeC,UAAWR,UCCrCS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCMdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.122e3629.chunk.js","sourcesContent":["import bootstrap from 'bootstrap'\r\nimport '../App.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Home() {\r\n    return(\r\n        <div class=\"container home\">\r\n            <div>\r\n                <h1>Production Buddy</h1>\r\n                <Button class=\"btn btn-primary\" href=\"/filling1050\" role=\"button\">Start</Button>\r\n            </div>\r\n        </div>\r\n        \r\n    ) }\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\n\r\nconst walkingGif = \"https://media.giphy.com/media/10h1BGkwYiIydi/giphy.gif\" \r\nconst setUpGif = \"https://media.giphy.com/media/3ohzdOrcdpiD26TPt6/giphy.gif\"\r\nconst lunchGif = \"https://media.giphy.com/media/KeEnqOWYF7tgE4uPyL/giphy.gif\"\r\nconst breakGif = \"https://media.giphy.com/media/RiWZUGcZPEKdQgrQ96/giphy.gif\"\r\nconst celebrateGif = \"https://media.giphy.com/media/26u4cqiYI30juCOGY/giphy.gif\"\r\nvar image = \"\"\r\n\r\n\r\nfunction Timer() {\r\n  const [fakeCurrentDate, setFakeCurrentDate] = useState(new Date()) // default value can be anything you want\r\n\r\n  useEffect(() => {\r\n      setTimeout(() => setFakeCurrentDate(new Date()), 1000)\r\n  }, [fakeCurrentDate])\r\n  var currentTimeDate = new Date()\r\n  var hour = currentTimeDate.getHours()\r\n  var minute = currentTimeDate.getMinutes()\r\n  var seconds = currentTimeDate.getSeconds()\r\n  var timer = hour*60*60 + minute*60 + seconds\r\n  var message = \"\"\r\n  var count = 0\r\n  var cage = 0\r\n  var fill = 0\r\n\r\n  if (timer < 25800) {\r\n    message = \"Setup\"\r\n    count = \"\"\r\n    image = setUpGif\r\n  }\r\n  if (timer > 25800 & timer <= 35400) {\r\n    message = \"Caging\"\r\n    cage = timer - 25800\r\n    count = Math.round(cage / 8)\r\n    image = walkingGif\r\n  }\r\n  if (timer > 35400 & timer <= 36000) {\r\n    message = \"Set Up\"\r\n    count = \"\"\r\n    image = setUpGif\r\n  }\r\n  if (timer > 36000 & timer <= 43200) {\r\n    message = \"Filling\"\r\n    fill = timer - 36000\r\n    count = Math.round(fill / 15.3)\r\n    image = walkingGif\r\n  }\r\n  if (timer > 43200 & timer <= 45600) {\r\n    message = \"40 Minute Lunch\"\r\n    count = \"\"\r\n    image = lunchGif\r\n  }\r\n  if (timer > 45600 & timer <= 50400) {\r\n    message = \"Filling\"\r\n    fill = timer - 45600\r\n    count = 465 + Math.round(fill / 15.3)\r\n    image = walkingGif\r\n  }\r\n  if (timer > 50400 & timer <= 51600) {\r\n    message = \"20 Minute Break\"\r\n    count = \"\"\r\n    image = breakGif\r\n  }\r\n  if (timer > 51600 & timer <= 55800) {\r\n    message = \"Filling\"\r\n    fill = timer - 51600\r\n    count = 775 + Math.round(fill / 15.3)\r\n    image = walkingGif\r\n  }\r\n  if (timer > 55800) {\r\n    message = \"Complete!!!\"\r\n    count = \"\"\r\n    image = celebrateGif\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <img src={image} alt=\"loading...\" />\r\n      <h1>{message}</h1>\r\n      <h1>{count}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer","import Timer from \"./Timer\"\r\nimport Clock from 'react-live-clock';\r\n\r\nfunction filling1050() {\r\n    \r\n    return(\r\n        <div class=\"container home\">\r\n            <Timer/>\r\n            <div>\r\n            <Clock format={'HH:mm:ss'} ticking={true} timezone={'US/Eastern'} />\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    ) }\r\nexport default filling1050","import './App.css';\nimport Home from \"./components/Home\"\nimport filling1050 from \"./components/Filling1050\"\nimport {Route, Switch} from \"react-router-dom\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route exact path=\"/filling1050\" component={filling1050}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter as Router,\n  Route,\n  useHistory,\n  Switch,\n} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}